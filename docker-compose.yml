# ---------- SCENARIO 1: DEPLOY WITH REMOTE IMAGES ----------

version: '3.8'

services:
  rs_server_webapp:
    image: miccighel/rs_server:v1.0.15
    command: bash -c "rails db:migrate && rails server -p 3000 -b '0.0.0.0' -e production"
    env_file: .env
    environment:
      POSTGRES_HOST: "postgres"
    ports:
      - "3000:3000"
    depends_on:
      - rs_server_database
    container_name: webapp

  rs_server_database:
    image: postgres:11
    env_file: .env
    ports:
      - "5432:5432"
    container_name: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data

volumes:
  pg_data:

# ---------- END OF SCENARIO 1: DEPLOY WITH REMOTE IMAGES ----------

# ---------- SCENARIO 2: DEPLOY WITH LOCAL BUILD ----------

#version: '3.8'
#
#services:
#  rs_server_webapp:
#    build: .
#    env_file: .env
#    environment:
#      # The first two variables are passed to the environment because in development mode the application uses the letter_opener
#      # Gem to render in-browser emails that in production mode are sent "for real". Such a gem uses an application called Launchy,
#      # which spawns a browser process on the machine. However, this cannot work in environments such as Docker containers.
#      # Thus, they are not needed in a production environment.
#      # As for the third variable, the one defined in the .env file has the highest priority.
#      LAUNCHY_DRY_RUN: "true"
#      BROWSER: "/dev/null"
#      POSTGRES_HOST: "host.docker.internal"
#    command: bash -c "rails db:migrate && rails server -p 3000 -b '0.0.0.0' -e development"
#    volumes:
#      - .:/app
#    ports:
#      - "3000:3000"
#    depends_on:
#      - rs_server_database
#    container_name: webapp
#
#  rs_server_database:
#    image: postgres:11.2
#    env_file: .env
#    ports:
#      - "5432:5432"
#    container_name: postgres
#    volumes:
#      - pg_data:/var/lib/postgresql/data
#
#volumes:
#  pg_data:

# ---------- END OF SCENARIO 2: DEPLOY WITH LOCAL BUILD ----------

# ---------- ADDITIONAL USEFUL COMMANDS ----------

# docker-compose run rs_server_webapp rails db:create
# docker-compose run rs_server_webapp rails db:migrate
# docker-compose run rs_server_webapp rails db:seed (Eventually)
# docker-compose run rs_server_webapp rails server -p 3000 -b '0.0.0.0' (Dev Mode)
# docker-compose run rs_server_webapp rails server -p 3000 -b '0.0.0.0' -e production (Prod Mode)

# ---------- END ----------